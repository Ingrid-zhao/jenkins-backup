Started by timer
Running in Durability level: MAX_SURVIVABILITY
[8mha:////4DOlrZhma2TKYqx8mtRBwGXVE8Xt4z3OJyo/zi+ICDdzAAAAoh+LCAAAAAAAAP9tjTEOwjAQBM8BClpKHuFItIiK1krDC0x8GCfWnbEdkooX8TX+gCESFVvtrLSa5wtWKcKBo5UdUu8otU4GP9jS5Mixv3geZcdn2TIl9igbHBs2eJyx4YwwR1SwULBGaj0nRzbDRnX6rmuvydanHMu2V1A5c4MHCFXMWcf8hSnC9jqYxPTz/BXAFEIGsfuclm8zQVqFvQAAAA==[0m[Pipeline] Start of Pipeline
[8mha:////4B4K7nOhvaaLmbeE3w0NEhE1GAALwLDjakw9plXgkY6XAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycohUghExsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jduZBmjwAAAAA==[0m[Pipeline] node
Still waiting to schedule task
Waiting for next available executor on â€˜[8mha:////4EheNQ7D4c27QswDGPiDpGtf9rfQF1HauEmyd+/REsZ/AAAAoh+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyeEgZx/eT83ILSktQiICOvpCg/Jye1SDdLHwCRPP8lzAAAAA==[0mcontroller-jâ€™
Running on [8mha:////4EheNQ7D4c27QswDGPiDpGtf9rfQF1HauEmyd+/REsZ/AAAAoh+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyeEgZx/eT83ILSktQiICOvpCg/Jye1SDdLHwCRPP8lzAAAAA==[0mcontroller-j in /root/.jenkins/workspace/spr-test-nicSilver
[8mha:////4NUxBMzN6CtFAbQ4pdo7pH8ZuwVHigLf0SdP3FcjQTwyAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0gA0xsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jfoP95RwAAAAA==[0m[Pipeline] {
[8mha:////4OCB1+Up79PmV3LnMeomKr9r+JFCKkFjAfTpr2UorbLOAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0gQkxsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jc09154wAAAAA==[0m[Pipeline] stage
[8mha:////4N6KQN35K8CT/Pcr9a+R4oOEu4uEh3phvpB1t67zd2hmAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0ggUxsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jek7ggRwAAAAA==[0m[Pipeline] { (rm project dir)
[8mha:////4EWjgIQS1R18e39T6LdOu3ZpSMSXMburmKwxJHd8e163AAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0gwExsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jcChmMxwAAAAA==[0m[Pipeline] script
[8mha:////4NOJ/YVWDlnnBpjDdLKlLZkF5LrR387vblsx7fWhZkPlAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0BAkxsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jfpX/cvwAAAAA==[0m[Pipeline] {
[8mha:////4MAm0moKTc8Eo2PcB0LgkHNHI7Xtf5Poej2Mf/l8xh/lAAAAoh+LCAAAAAAAAP9tjTEOAiEURD9rLGwtPQTbaoyVLaHxBMgiwpL/WWDdrTyRV/MOEjexcpJJ5k3zXm9Y5wQnSpZ7g73DrB2PYbR18YlSfws0cU9XrgkzBcOlmSR15rygpGJgCWtgJWBjUAfKDm2BrfDqodqg0LaXkup3FNC4boAnMFHNRaXyhTnB7j52mfDn+SuAORZg+9pD/AAeoCAqvAAAAA==[0m[Pipeline] sh
+ ls /root/.jenkins/workspace/spr-test-nicSilver/npxtester
ls: cannot access '/root/.jenkins/workspace/spr-test-nicSilver/npxtester': No such file or directory
[8mha:////4MftwC6NxviNjDdpfna9VBlJkoMp8EhRTGL2zcTKdEZ0AAAAox+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMKBDglR0VppeIFJjHFi3QX7QlLxIr7GH4iIRMVWO9PM641lijhydKqx1HpKlVdd6N301MCxvQYeVMMXVTElDlaVdii5tqcZSxaLeVmOhcbKUhU4eXKCtW7MwxTBkCvOEid30Mh9fccTmZ7KYqJ8YYzY3Po6Mf06fwMYu06Q77aCbP8Brmfz270AAAA=[0m[Pipeline] }
[8mha:////4Kr9K7llyIIfXzIi7fTbyam3A+VyjB0I1hAyH+fEbXLCAAAAox+LCAAAAAAAAP9tjTESgjAQRT84FraWHiIMlYVjZZuh8QQRYgxkdjFZhMoTeTXvICMzVv7qv9e81xvrFHHk6FRrqfOUaq/6MLj5qZFjdw08qpYvqmZKHKyq7FhxY08LViwWy7IcK42NpTpw8uQEW92ahymCIVecJc7uoJH75o4nMj2XxUT5whSxuw1NYvp1/gYw9b0gL0tBtv8Aj1Msdr0AAAA=[0m[Pipeline] // script
[8mha:////4FI2+bSiptyXTIERd0s3FW0AIUAVzDIQC15QCQE4LYPvAAAAox+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMIRFDSIitZKwwtMYowT6y7YF5KKF/E1/kBEJCq22plmXm8sU8SRo1ONpdZTqrzqQu+mpwaO7TXwoBq+qIopcbCqtEPJtT3NWLJYzMtyLDRWlqrAyZMTrHVjHqYIhlxxlji5g0bu6zueyPRUFhPlC2PE5tbXienX+RvA2HWCfLsTZPsPyRmLRr0AAAA=[0m[Pipeline] }
[8mha:////4EIF7pCgSAhTUJ+YeVF144RCQBElcAy/oq5IQm3P5r/FAAAAox+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMIRQlSIitZKwwtMYowT6y7YF5KKF/E1/kBEJCq22plmXm8sU8SRo1ONpdZTqrzqQu+mpwaO7TXwoBq+qIopcbCqtEPJtT3NWLJYzMtyLDRWlqrAyZMTrHVjHqYIhlxxlji5g0bu6zueyPRUFhPlC2PE5tbXienX+RvA2HWCfLsTZPsPw2Hi4r0AAAA=[0m[Pipeline] // stage
[8mha:////4O65h0jm98EO51SGQmOdf6FpfngMUfFS1Hkxj+qIATCfAAAAph+LCAAAAAAAAP9tjTEOwjAQBM9BKWgpeYQjpHSIitZywwtMYowT6y7YF5KKF/E1/oAhEhVb7ay0mucLyhThQNHJzmLvMTVeDmF0ucmJYn8JNMmOzrIhTBSs1HbS1NrjgprYwhJRwErB2mITKHl0DBvVmbupgkFXnTjmba+g8O0NHiBUNrOJ/IU5wvY6tonw5/krgHlgEDVDsas/x/INoKa7ysEAAAA=[0m[Pipeline] stage
[8mha:////4Cwh2bfnyXtsNeYvUrnMhkgZn3DOCE3ZIocZCmHhDj1kAAAApx+LCAAAAAAAAP9tjTEOwjAUQ3+LOrAycohUSDAhpq5RFk4QmhDSRv+Xn5R24kRcjTvQUokJD5ZtyXqvNxSR4UTsRGOx9RhrL7rQuymJgbi9BhpEQxdRE0YKVig7KDK2WqqiZGFRlsNKwtpiHSh6dAk2stEPXQaNrjwnnrajhNybOzwhkxM5aU7fMjJsb72JhD/OXwCMXYJ8t5/tMD+LD5WQ+PfCAAAA[0m[Pipeline] { (clone)
[8mha:////4CFOXQFtiiA+7tA4CXv18jhcFszpIgsA6m3wBj5vXwoxAAAApB+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIiCmgQVVrLDS8wsTFOrDtjOyQVL+Jr/IFAJCq2WO1sM88XLFOEI0eLraHOUWocBt/baeHAsbt4HrDlMzZMib1BaQbJ2tQzSs4G5hQlLASsDDWekyObYS1adVeVV2SrU47TdxBQOn2DBxRiMmcV8xfGCJtrrxPTz/NXAGPIUG53n9qHN7LjSKW+AAAA[0m[Pipeline] sh
+ git clone -b develop https://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@github.com/intel-innersource/applications.validation.network-platform.npxtester.git npxtester
Cloning into 'npxtester'...
[8mha:////4JxnGUheoVbdA4jH7w1zuxcsCY2poKXOhDnLMn7NKJYFAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIiCkSBqNJabniBiY1xYt0Z2yGpeBFf4w8EIlGxxWpnm3m+YJkiHDlabA11jlLjMPjeTgsHjt3F84Atn7FhSuwNSjNI1qaeUXI2MKcoYSFgZajxnBzZDGvRqruqvCJbnXKcvoOA0ukbPKAQkzmrmL8wRthce52Yfp6/AhhDyFBu95/avQGOY4V7vgAAAA==[0m[Pipeline] }
[8mha:////4D4+5H4RzROPZTW0wBHD+XjMhoO5mPw9EWUJAbCIJpuGAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIiJAokRJXWcsMLTGyME+vO2A5JxYv4Gn8gEImKLVY728zzBcsU4cjRYmuoc5Qah8H3dlo4cOwungds+YwNU2JvUJpBsjb1jJKzgTlFCQsBK0ON5+TIZliLVt1V5RXZ6pTj9B0ElE7f4AGFmMxZxfyFMcLm2uvE9PP8FcAYQoZyu//U7g3N4dT9vgAAAA==[0m[Pipeline] // stage
[8mha:////4AJAGqZwaYqyNNZtbc8g6ZE112gHcOMJEUqcQ3uLTkOfAAAApx+LCAAAAAAAAP9tjTEOwjAQBM9BKWgpeYQjJBqEqGgtN7zAxMY4se6CfSGpeBFf4w8EIlGx1c5Kq3m+oMwJDpS8bBy2AXMdZBd7PzU5UGovkQbZ0FnWhJmik9oNmqw7zqiJHcwRBSwULB3WkXJAz7BSjbmbKhr01YnTtO0VFMHe4AFCTWY2ib8wJlhfe5sJf56/Ahg7BrFlKDa7z7F8A361JXbBAAAA[0m[Pipeline] stage
[8mha:////4PP68w9I/uoPNBdRzp82S+tTLGAqcpDjYGyOG/BwZs8HAAAApx+LCAAAAAAAAP9tjTEOwjAUQ3+LOrAycogU2BDqxBp14QShCSFp9H9JUtKJE3E17kCgEhMeLNuS9Z4vqIKHhrxmVmFvMHSGDW7UObFEvr84SszSmXWEgZxirUotSXWca0tRwayihAWHpcLOUTCoI6y4FXdRO4G6PkWftwOH0sgbPKDgmRyFj98yeVhfRxkIf5y/AJiGCOV2n223+TyrN7xWSV3CAAAA[0m[Pipeline] { (set args)
[8mha:////4BsNiMtY/8UtmXAIxp6NV4VtqKiaHUkJeJGRvFkfJcU+AAAAox+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOICtIgqreWGF5jYGCfWnbEdkooX8TX+QCASFVusdraZ5wuWKcKRo8XWUOcoNQ6D7+20cODYXTwP2PIZG6bE3qA0g2Rt6hklZwNzihIWAlaGGs/Jkc2wFq26q8orstUpx+k7CCidvsEDCjGZs4r5C2OEzbXXienn+SuAMWQo99tP7cIbaOP4NL4AAAA=[0m[Pipeline] sh
+ python /root/.jenkins/workspace/spr-test-nicSilver/npxtester/conf/change_args.py '{"dpdk_dir":"/root/dpdk-stable-20.11.3/","sut_conf":{"board_type":"rp","host":"10.239.183.130","pf1":"ens4f0","os":"UBUNTU","PF1_NIC_type":"100"},"pkg_generator":{"host":"10.239.182.88","pf1":"ens785f0"},"drive_info":{"drive_version":"5.15.0-1005-realtime"}}'
[8mha:////4AyFPX+UZcZf/6aTNXdj+lWE0Z2b4chbTZ9e7eCHFoeRAAAAox+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOKC0iIqWisNLzCJMXasO8d2cCpexNf4A4FIVGyx2tlmni9YxwBHDhqtot5QbA16N+p5YebQXx1ntHzBlimyU9io3HCnTgs2nBQsKUpYCdgoah1HQzrBVlh5l5WTpKtzCvN3EFCaboAHFGI2JxnSF6YAu9vYRaaf568AJu8TlHX9qf0b7E/nQb4AAAA=[0m[Pipeline] }
[8mha:////4AFg/aWh/jHSmrlH6sy1kKjz0TFBfVRN+miPQW2LyX/uAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIioEIoFa3lhheYxBgn1l2wHZyKF/E1/oBFJCq2WO1sM683LIOHmr3BTlNvKTQWBzeavDCx76+OE3Z8wYYpsNModZLc6tOMkqOGOUUJCwErTY3jYMlEWItOPVTlFJnqHH3+jgJK297hCYXI5qh8/MLkYXMb28D08/wVwDQMEcrdPtf28AEud0rYvgAAAA==[0m[Pipeline] // stage
[8mha:////4Bhd+KV1EsVM3bnXBHnMClLv0EnBj/3vPQbr+7HWEbmAAAAAph+LCAAAAAAAAP9tjTEOwjAQBM9BKWgpeYQjoXSIitZywwtMYowT6y7YF5KKF/E1/oAhEhVb7ay0mucLyhThQNHJzmLvMTVeDmF0ucmJYn8JNMmOzrIhTBSs1HbS1NrjgprYwhJRwErB2mITKHl0DBvVmbupgkFXnTjmba+g8O0NHiBUNrOJ/IU5wvY6tonw5/krgHlgEDVDsas/x/INPbxT+8EAAAA=[0m[Pipeline] stage
[8mha:////4P13TIuP26wSoF8WyLGiU1qV0Q6Z+QylTska1uSfBb7mAAAApx+LCAAAAAAAAP9tjTEOwjAUQ3+LOrAycohUQjAhpq5RFk4QmhDSRv+Xn5R24kRcjTvQUokJD5ZtyXqvNxSR4UTsRGOx9RhrL7rQuymJgbi9BhpEQxdRE0YKVig7KDK2WqqiZGFRlsNKwtpiHSh6dAk2stEPXQaNrjwnnrajhNybOzwhkxM5aU7fMjJsb72JhD/OXwCMXYJ8t5/tMD+LD/hYjrHCAAAA[0m[Pipeline] { (run nic case)
[8mha:////4GTknrEFintOtvUdwa6e4xsVITgbJBx3RxnOHKjsKTnjAAAAqB+LCAAAAAAAAP9tjTEOwjAUQ3+LOrAycohUQoIFMXWNsnCC0ISQNvq//KS0EyfiatyBlkpMeLBsS9Z7vaGIDCdiJxqLrcdYe9GF3k1JDMTtNdAgGrqImjBSsELZQZGx1VIVJQuLshxWEtYW60DRo0uwkY1+6DJodOU58bQdJeTe3OEJmZzISXP6lpFhe+tNJPxx/gJg7BLku/1sh/lZfACW9ZT2wgAAAA==[0m[Pipeline] script
[8mha:////4GToWcz1lEtttcc1F67+obVKf97ChyGWoNBgdNb8ln6iAAAAqB+LCAAAAAAAAP9tjTEOwjAUQ3+LOrAycohUYoABMXWNsnCC0ISQNvq//KS0EyfiatyBlkpMeLBsS9Z7vaGIDCdiJxqLrcdYe9GF3k1JDMTtNdAgGrqImjBSsELZQZGx1VIVJQuLshxWEtYW60DRo0uwkY1+6DJodOU58bQdJeTe3OEJmZzISXP6lpFhe+tNJPxx/gJg7BLku/1sh/lZfAAyQCqkwgAAAA==[0m[Pipeline] {
[8mha:////4M/BBJOrvLliK1a64sS7A0hf4H4seiclg8D1IX9OqKAVAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIi0YCEqNJabniBiY1xYt0Z2yGpeBFf4w8EIlGxxWpnm3m+YJkiHDlabA11jlLjMPjeTgsHjt3F84Atn7FhSuwNSjNI1qaeUXI2MKcoYSFgZajxnBzZDGvRqruqvCJbnXKcvoOA0ukbPKAQkzmrmL8wRthce52Yfp6/AhhDhnK7+9Q+vAGvZp0gvgAAAA==[0m[Pipeline] sh
+ pytest /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics -s -m nicSilver --capture=tee-sys --html=/root/testconfig/testlogs/HtmlReport/nicSilver_report.html --self-contained-html
============================= test session starts ==============================
platform linux -- Python 3.6.8, pytest-6.2.4, py-1.11.0, pluggy-0.13.1
rootdir: /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics, configfile: pytest.ini
plugins: metadata-1.11.0, html-3.1.1
collected 19 items / 14 deselected / 5 selected

npxtester/Tests/testNics/test_nics.py 2022-04-13 06:08:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_silver_Networking_ConnectivityEnableDisable_06_08_37/test_silver_Networking_ConnectivityEnableDisable.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_silver_Networking_ConnectivityEnableDisable_06_08_37
2022-04-13 06:08:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_silver_Networking_ConnectivityEnableDisable case ============================
2022-04-13 06:08:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:08:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:09:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
E2022-04-13 06:09:07 - NicTestFixture.py - [line:35] - root - INFO - ============================ end of run test_silver_Networking_ConnectivityEnableDisable case ============================
2022-04-13 06:09:07 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_silver_ConnectivityReboot_06_09_07/test_silver_ConnectivityReboot.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_silver_ConnectivityReboot_06_09_07
2022-04-13 06:09:07 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_silver_ConnectivityReboot case ============================
2022-04-13 06:09:07 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:09:07 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:09:37 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
E2022-04-13 06:09:37 - NicTestFixture.py - [line:35] - root - INFO - ============================ end of run test_silver_ConnectivityReboot case ============================
2022-04-13 06:09:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_gold_PI_Networking_SRIOV_CheckDevice_06_09_37/test_gold_PI_Networking_SRIOV_CheckDevice.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_gold_PI_Networking_SRIOV_CheckDevice_06_09_37
2022-04-13 06:09:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_gold_PI_Networking_SRIOV_CheckDevice case ============================
2022-04-13 06:09:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:09:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:10:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
E2022-04-13 06:10:07 - NicTestFixture.py - [line:35] - root - INFO - ============================ end of run test_gold_PI_Networking_SRIOV_CheckDevice case ============================
2022-04-13 06:10:07 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_InternetProtocolv4v6_06_10_07/test_PI_Networking_InternetProtocolv4v6.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_InternetProtocolv4v6_06_10_07
2022-04-13 06:10:07 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_PI_Networking_InternetProtocolv4v6 case ============================
2022-04-13 06:10:07 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:10:07 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:10:37 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
E2022-04-13 06:10:37 - NicTestFixture.py - [line:35] - root - INFO - ============================ end of run test_PI_Networking_InternetProtocolv4v6 case ============================
2022-04-13 06:10:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_Link_State_Check_06_10_37/test_PI_Networking_Link_State_Check.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_Link_State_Check_06_10_37
2022-04-13 06:10:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_PI_Networking_Link_State_Check case ============================
2022-04-13 06:10:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:10:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:11:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
E2022-04-13 06:11:07 - NicTestFixture.py - [line:35] - root - INFO - ============================ end of run test_PI_Networking_Link_State_Check case ============================
                              [100%]

==================================== ERRORS ====================================
_ ERROR at setup of Test_Nics.test_silver_Networking_ConnectivityEnableDisable _

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7272dd5c0>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
>                                                       self.sut_conf["password"],self.sut_conf["port"])

npxtester/Tests/testNics/test_nics.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <libs.commons.sshInstance.sshInstance object at 0x7ff72ade5fd0>
hostname = '10.239.183.130', username = 'root', password = 'password', port = 22

    def get_ssh_instance(self, hostname, username, password, port):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
>       client.connect(hostname=hostname, port=port, username=username, password=password, timeout=30)

npxtester/libs/commons/sshInstance.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paramiko.client.SSHClient object at 0x7ff7272ddac8>
hostname = '10.239.183.130', port = 22, username = 'root', password = 'password'
pkey = None, key_filename = None, timeout = 30, allow_agent = True
look_for_keys = True, compress = False
sock = <socket.socket fd=6, family=AddressFamily.AF_INET, type=2049, proto=0, laddr=('10.112.97.60', 35774)>
gss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None
banner_timeout = None, auth_timeout = None, gss_trust_dns = True
passphrase = None, disabled_algorithms = None

    def connect(
        self,
        hostname,
        port=SSH_PORT,
        username=None,
        password=None,
        pkey=None,
        key_filename=None,
        timeout=None,
        allow_agent=True,
        look_for_keys=True,
        compress=False,
        sock=None,
        gss_auth=False,
        gss_kex=False,
        gss_deleg_creds=True,
        gss_host=None,
        banner_timeout=None,
        auth_timeout=None,
        gss_trust_dns=True,
        passphrase=None,
        disabled_algorithms=None,
    ):
        """
        Connect to an SSH server and authenticate to it.  The server's host key
        is checked against the system host keys (see `load_system_host_keys`)
        and any local host keys (`load_host_keys`).  If the server's hostname
        is not found in either set of host keys, the missing host key policy
        is used (see `set_missing_host_key_policy`).  The default policy is
        to reject the key and raise an `.SSHException`.
    
        Authentication is attempted in the following order of priority:
    
            - The ``pkey`` or ``key_filename`` passed in (if any)
    
              - ``key_filename`` may contain OpenSSH public certificate paths
                as well as regular private-key paths; when files ending in
                ``-cert.pub`` are found, they are assumed to match a private
                key, and both components will be loaded. (The private key
                itself does *not* need to be listed in ``key_filename`` for
                this to occur - *just* the certificate.)
    
            - Any key we can find through an SSH agent
            - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
              ``~/.ssh/``
    
              - When OpenSSH-style public certificates exist that match an
                existing such private key (so e.g. one has ``id_rsa`` and
                ``id_rsa-cert.pub``) the certificate will be loaded alongside
                the private key and used for authentication.
    
            - Plain username/password auth, if a password was given
    
        If a private key requires a password to unlock it, and a password is
        passed in, that password will be used to attempt to unlock the key.
    
        :param str hostname: the server to connect to
        :param int port: the server port to connect to
        :param str username:
            the username to authenticate as (defaults to the current local
            username)
        :param str password:
            Used for password authentication; is also used for private key
            decryption if ``passphrase`` is not given.
        :param str passphrase:
            Used for decrypting private keys.
        :param .PKey pkey: an optional private key to use for authentication
        :param str key_filename:
            the filename, or list of filenames, of optional private key(s)
            and/or certs to try for authentication
        :param float timeout:
            an optional timeout (in seconds) for the TCP connect
        :param bool allow_agent:
            set to False to disable connecting to the SSH agent
        :param bool look_for_keys:
            set to False to disable searching for discoverable private key
            files in ``~/.ssh/``
        :param bool compress: set to True to turn on compression
        :param socket sock:
            an open socket or socket-like object (such as a `.Channel`) to use
            for communication to the target host
        :param bool gss_auth:
            ``True`` if you want to use GSS-API authentication
        :param bool gss_kex:
            Perform GSS-API Key Exchange and user authentication
        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
        :param str gss_host:
            The targets name in the kerberos database. default: hostname
        :param bool gss_trust_dns:
            Indicates whether or not the DNS is trusted to securely
            canonicalize the name of the host being connected to (default
            ``True``).
        :param float banner_timeout: an optional timeout (in seconds) to wait
            for the SSH banner to be presented.
        :param float auth_timeout: an optional timeout (in seconds) to wait for
            an authentication response.
        :param dict disabled_algorithms:
            an optional dict passed directly to `.Transport` and its keyword
            argument of the same name.
    
        :raises:
            `.BadHostKeyException` -- if the server's host key could not be
            verified
        :raises: `.AuthenticationException` -- if authentication failed
        :raises:
            `.SSHException` -- if there was any other error connecting or
            establishing an SSH session
        :raises socket.error: if a socket error occurred while connecting
    
        .. versionchanged:: 1.15
            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
            ``gss_deleg_creds`` and ``gss_host`` arguments.
        .. versionchanged:: 2.3
            Added the ``gss_trust_dns`` argument.
        .. versionchanged:: 2.4
            Added the ``passphrase`` argument.
        .. versionchanged:: 2.6
            Added the ``disabled_algorithms`` argument.
        """
        if not sock:
            errors = {}
            # Try multiple possible address families (e.g. IPv4 vs IPv6)
            to_try = list(self._families_and_addresses(hostname, port))
            for af, addr in to_try:
                try:
                    sock = socket.socket(af, socket.SOCK_STREAM)
                    if timeout is not None:
                        try:
                            sock.settimeout(timeout)
                        except:
                            pass
>                   retry_on_signal(lambda: sock.connect(addr))

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

function = <function SSHClient.connect.<locals>.<lambda> at 0x7ff72980bea0>

    def retry_on_signal(function):
        """Retries function until it doesn't raise an EINTR error"""
        while True:
            try:
>               return function()

/usr/local/lib/python3.6/site-packages/paramiko/util.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   retry_on_signal(lambda: sock.connect(addr))
E   socket.timeout: timed out

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: timeout

During handling of the above exception, another exception occurred:

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7272dd5c0>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
                                                        self.sut_conf["password"],self.sut_conf["port"])
        except:
            logging.info("Case Failed:ssh to sut failed,please check")
>           assert 200 == 400, "Case Failed:ssh to sut failed,please check"
E           AssertionError: Case Failed:ssh to sut failed,please check
E           assert 200 == 400

npxtester/Tests/testNics/test_nics.py:35: AssertionError
---------------------------- Captured stdout setup -----------------------------
2022-04-13 06:08:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_silver_Networking_ConnectivityEnableDisable_06_08_37/test_silver_Networking_ConnectivityEnableDisable.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_silver_Networking_ConnectivityEnableDisable_06_08_37
2022-04-13 06:08:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_silver_Networking_ConnectivityEnableDisable case ============================
2022-04-13 06:08:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:08:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:09:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
__________ ERROR at setup of Test_Nics.test_silver_ConnectivityReboot __________

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270d1588>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
>                                                       self.sut_conf["password"],self.sut_conf["port"])

npxtester/Tests/testNics/test_nics.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <libs.commons.sshInstance.sshInstance object at 0x7ff727012a58>
hostname = '10.239.183.130', username = 'root', password = 'password', port = 22

    def get_ssh_instance(self, hostname, username, password, port):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
>       client.connect(hostname=hostname, port=port, username=username, password=password, timeout=30)

npxtester/libs/commons/sshInstance.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paramiko.client.SSHClient object at 0x7ff7270127f0>
hostname = '10.239.183.130', port = 22, username = 'root', password = 'password'
pkey = None, key_filename = None, timeout = 30, allow_agent = True
look_for_keys = True, compress = False
sock = <socket.socket fd=7, family=AddressFamily.AF_INET, type=2049, proto=0, laddr=('10.112.97.60', 35776)>
gss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None
banner_timeout = None, auth_timeout = None, gss_trust_dns = True
passphrase = None, disabled_algorithms = None

    def connect(
        self,
        hostname,
        port=SSH_PORT,
        username=None,
        password=None,
        pkey=None,
        key_filename=None,
        timeout=None,
        allow_agent=True,
        look_for_keys=True,
        compress=False,
        sock=None,
        gss_auth=False,
        gss_kex=False,
        gss_deleg_creds=True,
        gss_host=None,
        banner_timeout=None,
        auth_timeout=None,
        gss_trust_dns=True,
        passphrase=None,
        disabled_algorithms=None,
    ):
        """
        Connect to an SSH server and authenticate to it.  The server's host key
        is checked against the system host keys (see `load_system_host_keys`)
        and any local host keys (`load_host_keys`).  If the server's hostname
        is not found in either set of host keys, the missing host key policy
        is used (see `set_missing_host_key_policy`).  The default policy is
        to reject the key and raise an `.SSHException`.
    
        Authentication is attempted in the following order of priority:
    
            - The ``pkey`` or ``key_filename`` passed in (if any)
    
              - ``key_filename`` may contain OpenSSH public certificate paths
                as well as regular private-key paths; when files ending in
                ``-cert.pub`` are found, they are assumed to match a private
                key, and both components will be loaded. (The private key
                itself does *not* need to be listed in ``key_filename`` for
                this to occur - *just* the certificate.)
    
            - Any key we can find through an SSH agent
            - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
              ``~/.ssh/``
    
              - When OpenSSH-style public certificates exist that match an
                existing such private key (so e.g. one has ``id_rsa`` and
                ``id_rsa-cert.pub``) the certificate will be loaded alongside
                the private key and used for authentication.
    
            - Plain username/password auth, if a password was given
    
        If a private key requires a password to unlock it, and a password is
        passed in, that password will be used to attempt to unlock the key.
    
        :param str hostname: the server to connect to
        :param int port: the server port to connect to
        :param str username:
            the username to authenticate as (defaults to the current local
            username)
        :param str password:
            Used for password authentication; is also used for private key
            decryption if ``passphrase`` is not given.
        :param str passphrase:
            Used for decrypting private keys.
        :param .PKey pkey: an optional private key to use for authentication
        :param str key_filename:
            the filename, or list of filenames, of optional private key(s)
            and/or certs to try for authentication
        :param float timeout:
            an optional timeout (in seconds) for the TCP connect
        :param bool allow_agent:
            set to False to disable connecting to the SSH agent
        :param bool look_for_keys:
            set to False to disable searching for discoverable private key
            files in ``~/.ssh/``
        :param bool compress: set to True to turn on compression
        :param socket sock:
            an open socket or socket-like object (such as a `.Channel`) to use
            for communication to the target host
        :param bool gss_auth:
            ``True`` if you want to use GSS-API authentication
        :param bool gss_kex:
            Perform GSS-API Key Exchange and user authentication
        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
        :param str gss_host:
            The targets name in the kerberos database. default: hostname
        :param bool gss_trust_dns:
            Indicates whether or not the DNS is trusted to securely
            canonicalize the name of the host being connected to (default
            ``True``).
        :param float banner_timeout: an optional timeout (in seconds) to wait
            for the SSH banner to be presented.
        :param float auth_timeout: an optional timeout (in seconds) to wait for
            an authentication response.
        :param dict disabled_algorithms:
            an optional dict passed directly to `.Transport` and its keyword
            argument of the same name.
    
        :raises:
            `.BadHostKeyException` -- if the server's host key could not be
            verified
        :raises: `.AuthenticationException` -- if authentication failed
        :raises:
            `.SSHException` -- if there was any other error connecting or
            establishing an SSH session
        :raises socket.error: if a socket error occurred while connecting
    
        .. versionchanged:: 1.15
            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
            ``gss_deleg_creds`` and ``gss_host`` arguments.
        .. versionchanged:: 2.3
            Added the ``gss_trust_dns`` argument.
        .. versionchanged:: 2.4
            Added the ``passphrase`` argument.
        .. versionchanged:: 2.6
            Added the ``disabled_algorithms`` argument.
        """
        if not sock:
            errors = {}
            # Try multiple possible address families (e.g. IPv4 vs IPv6)
            to_try = list(self._families_and_addresses(hostname, port))
            for af, addr in to_try:
                try:
                    sock = socket.socket(af, socket.SOCK_STREAM)
                    if timeout is not None:
                        try:
                            sock.settimeout(timeout)
                        except:
                            pass
>                   retry_on_signal(lambda: sock.connect(addr))

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

function = <function SSHClient.connect.<locals>.<lambda> at 0x7ff726f90d08>

    def retry_on_signal(function):
        """Retries function until it doesn't raise an EINTR error"""
        while True:
            try:
>               return function()

/usr/local/lib/python3.6/site-packages/paramiko/util.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   retry_on_signal(lambda: sock.connect(addr))
E   socket.timeout: timed out

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: timeout

During handling of the above exception, another exception occurred:

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270d1588>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
                                                        self.sut_conf["password"],self.sut_conf["port"])
        except:
            logging.info("Case Failed:ssh to sut failed,please check")
>           assert 200 == 400, "Case Failed:ssh to sut failed,please check"
E           AssertionError: Case Failed:ssh to sut failed,please check
E           assert 200 == 400

npxtester/Tests/testNics/test_nics.py:35: AssertionError
---------------------------- Captured stdout setup -----------------------------
2022-04-13 06:09:07 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_silver_ConnectivityReboot_06_09_07/test_silver_ConnectivityReboot.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_silver_ConnectivityReboot_06_09_07
2022-04-13 06:09:07 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_silver_ConnectivityReboot case ============================
2022-04-13 06:09:07 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:09:07 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:09:37 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
____ ERROR at setup of Test_Nics.test_gold_PI_Networking_SRIOV_CheckDevice _____

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270e8c88>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
>                                                       self.sut_conf["password"],self.sut_conf["port"])

npxtester/Tests/testNics/test_nics.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <libs.commons.sshInstance.sshInstance object at 0x7ff7270e8be0>
hostname = '10.239.183.130', username = 'root', password = 'password', port = 22

    def get_ssh_instance(self, hostname, username, password, port):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
>       client.connect(hostname=hostname, port=port, username=username, password=password, timeout=30)

npxtester/libs/commons/sshInstance.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paramiko.client.SSHClient object at 0x7ff7270e8c50>
hostname = '10.239.183.130', port = 22, username = 'root', password = 'password'
pkey = None, key_filename = None, timeout = 30, allow_agent = True
look_for_keys = True, compress = False
sock = <socket.socket fd=6, family=AddressFamily.AF_INET, type=2049, proto=0, laddr=('10.112.97.60', 35778)>
gss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None
banner_timeout = None, auth_timeout = None, gss_trust_dns = True
passphrase = None, disabled_algorithms = None

    def connect(
        self,
        hostname,
        port=SSH_PORT,
        username=None,
        password=None,
        pkey=None,
        key_filename=None,
        timeout=None,
        allow_agent=True,
        look_for_keys=True,
        compress=False,
        sock=None,
        gss_auth=False,
        gss_kex=False,
        gss_deleg_creds=True,
        gss_host=None,
        banner_timeout=None,
        auth_timeout=None,
        gss_trust_dns=True,
        passphrase=None,
        disabled_algorithms=None,
    ):
        """
        Connect to an SSH server and authenticate to it.  The server's host key
        is checked against the system host keys (see `load_system_host_keys`)
        and any local host keys (`load_host_keys`).  If the server's hostname
        is not found in either set of host keys, the missing host key policy
        is used (see `set_missing_host_key_policy`).  The default policy is
        to reject the key and raise an `.SSHException`.
    
        Authentication is attempted in the following order of priority:
    
            - The ``pkey`` or ``key_filename`` passed in (if any)
    
              - ``key_filename`` may contain OpenSSH public certificate paths
                as well as regular private-key paths; when files ending in
                ``-cert.pub`` are found, they are assumed to match a private
                key, and both components will be loaded. (The private key
                itself does *not* need to be listed in ``key_filename`` for
                this to occur - *just* the certificate.)
    
            - Any key we can find through an SSH agent
            - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
              ``~/.ssh/``
    
              - When OpenSSH-style public certificates exist that match an
                existing such private key (so e.g. one has ``id_rsa`` and
                ``id_rsa-cert.pub``) the certificate will be loaded alongside
                the private key and used for authentication.
    
            - Plain username/password auth, if a password was given
    
        If a private key requires a password to unlock it, and a password is
        passed in, that password will be used to attempt to unlock the key.
    
        :param str hostname: the server to connect to
        :param int port: the server port to connect to
        :param str username:
            the username to authenticate as (defaults to the current local
            username)
        :param str password:
            Used for password authentication; is also used for private key
            decryption if ``passphrase`` is not given.
        :param str passphrase:
            Used for decrypting private keys.
        :param .PKey pkey: an optional private key to use for authentication
        :param str key_filename:
            the filename, or list of filenames, of optional private key(s)
            and/or certs to try for authentication
        :param float timeout:
            an optional timeout (in seconds) for the TCP connect
        :param bool allow_agent:
            set to False to disable connecting to the SSH agent
        :param bool look_for_keys:
            set to False to disable searching for discoverable private key
            files in ``~/.ssh/``
        :param bool compress: set to True to turn on compression
        :param socket sock:
            an open socket or socket-like object (such as a `.Channel`) to use
            for communication to the target host
        :param bool gss_auth:
            ``True`` if you want to use GSS-API authentication
        :param bool gss_kex:
            Perform GSS-API Key Exchange and user authentication
        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
        :param str gss_host:
            The targets name in the kerberos database. default: hostname
        :param bool gss_trust_dns:
            Indicates whether or not the DNS is trusted to securely
            canonicalize the name of the host being connected to (default
            ``True``).
        :param float banner_timeout: an optional timeout (in seconds) to wait
            for the SSH banner to be presented.
        :param float auth_timeout: an optional timeout (in seconds) to wait for
            an authentication response.
        :param dict disabled_algorithms:
            an optional dict passed directly to `.Transport` and its keyword
            argument of the same name.
    
        :raises:
            `.BadHostKeyException` -- if the server's host key could not be
            verified
        :raises: `.AuthenticationException` -- if authentication failed
        :raises:
            `.SSHException` -- if there was any other error connecting or
            establishing an SSH session
        :raises socket.error: if a socket error occurred while connecting
    
        .. versionchanged:: 1.15
            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
            ``gss_deleg_creds`` and ``gss_host`` arguments.
        .. versionchanged:: 2.3
            Added the ``gss_trust_dns`` argument.
        .. versionchanged:: 2.4
            Added the ``passphrase`` argument.
        .. versionchanged:: 2.6
            Added the ``disabled_algorithms`` argument.
        """
        if not sock:
            errors = {}
            # Try multiple possible address families (e.g. IPv4 vs IPv6)
            to_try = list(self._families_and_addresses(hostname, port))
            for af, addr in to_try:
                try:
                    sock = socket.socket(af, socket.SOCK_STREAM)
                    if timeout is not None:
                        try:
                            sock.settimeout(timeout)
                        except:
                            pass
>                   retry_on_signal(lambda: sock.connect(addr))

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

function = <function SSHClient.connect.<locals>.<lambda> at 0x7ff72980bea0>

    def retry_on_signal(function):
        """Retries function until it doesn't raise an EINTR error"""
        while True:
            try:
>               return function()

/usr/local/lib/python3.6/site-packages/paramiko/util.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   retry_on_signal(lambda: sock.connect(addr))
E   socket.timeout: timed out

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: timeout

During handling of the above exception, another exception occurred:

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270e8c88>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
                                                        self.sut_conf["password"],self.sut_conf["port"])
        except:
            logging.info("Case Failed:ssh to sut failed,please check")
>           assert 200 == 400, "Case Failed:ssh to sut failed,please check"
E           AssertionError: Case Failed:ssh to sut failed,please check
E           assert 200 == 400

npxtester/Tests/testNics/test_nics.py:35: AssertionError
---------------------------- Captured stdout setup -----------------------------
2022-04-13 06:09:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_gold_PI_Networking_SRIOV_CheckDevice_06_09_37/test_gold_PI_Networking_SRIOV_CheckDevice.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_gold_PI_Networking_SRIOV_CheckDevice_06_09_37
2022-04-13 06:09:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_gold_PI_Networking_SRIOV_CheckDevice case ============================
2022-04-13 06:09:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:09:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:10:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
_____ ERROR at setup of Test_Nics.test_PI_Networking_InternetProtocolv4v6 ______

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff72724a160>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
>                                                       self.sut_conf["password"],self.sut_conf["port"])

npxtester/Tests/testNics/test_nics.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <libs.commons.sshInstance.sshInstance object at 0x7ff72724a198>
hostname = '10.239.183.130', username = 'root', password = 'password', port = 22

    def get_ssh_instance(self, hostname, username, password, port):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
>       client.connect(hostname=hostname, port=port, username=username, password=password, timeout=30)

npxtester/libs/commons/sshInstance.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paramiko.client.SSHClient object at 0x7ff72724a208>
hostname = '10.239.183.130', port = 22, username = 'root', password = 'password'
pkey = None, key_filename = None, timeout = 30, allow_agent = True
look_for_keys = True, compress = False
sock = <socket.socket fd=8, family=AddressFamily.AF_INET, type=2049, proto=0, laddr=('10.112.97.60', 35780)>
gss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None
banner_timeout = None, auth_timeout = None, gss_trust_dns = True
passphrase = None, disabled_algorithms = None

    def connect(
        self,
        hostname,
        port=SSH_PORT,
        username=None,
        password=None,
        pkey=None,
        key_filename=None,
        timeout=None,
        allow_agent=True,
        look_for_keys=True,
        compress=False,
        sock=None,
        gss_auth=False,
        gss_kex=False,
        gss_deleg_creds=True,
        gss_host=None,
        banner_timeout=None,
        auth_timeout=None,
        gss_trust_dns=True,
        passphrase=None,
        disabled_algorithms=None,
    ):
        """
        Connect to an SSH server and authenticate to it.  The server's host key
        is checked against the system host keys (see `load_system_host_keys`)
        and any local host keys (`load_host_keys`).  If the server's hostname
        is not found in either set of host keys, the missing host key policy
        is used (see `set_missing_host_key_policy`).  The default policy is
        to reject the key and raise an `.SSHException`.
    
        Authentication is attempted in the following order of priority:
    
            - The ``pkey`` or ``key_filename`` passed in (if any)
    
              - ``key_filename`` may contain OpenSSH public certificate paths
                as well as regular private-key paths; when files ending in
                ``-cert.pub`` are found, they are assumed to match a private
                key, and both components will be loaded. (The private key
                itself does *not* need to be listed in ``key_filename`` for
                this to occur - *just* the certificate.)
    
            - Any key we can find through an SSH agent
            - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
              ``~/.ssh/``
    
              - When OpenSSH-style public certificates exist that match an
                existing such private key (so e.g. one has ``id_rsa`` and
                ``id_rsa-cert.pub``) the certificate will be loaded alongside
                the private key and used for authentication.
    
            - Plain username/password auth, if a password was given
    
        If a private key requires a password to unlock it, and a password is
        passed in, that password will be used to attempt to unlock the key.
    
        :param str hostname: the server to connect to
        :param int port: the server port to connect to
        :param str username:
            the username to authenticate as (defaults to the current local
            username)
        :param str password:
            Used for password authentication; is also used for private key
            decryption if ``passphrase`` is not given.
        :param str passphrase:
            Used for decrypting private keys.
        :param .PKey pkey: an optional private key to use for authentication
        :param str key_filename:
            the filename, or list of filenames, of optional private key(s)
            and/or certs to try for authentication
        :param float timeout:
            an optional timeout (in seconds) for the TCP connect
        :param bool allow_agent:
            set to False to disable connecting to the SSH agent
        :param bool look_for_keys:
            set to False to disable searching for discoverable private key
            files in ``~/.ssh/``
        :param bool compress: set to True to turn on compression
        :param socket sock:
            an open socket or socket-like object (such as a `.Channel`) to use
            for communication to the target host
        :param bool gss_auth:
            ``True`` if you want to use GSS-API authentication
        :param bool gss_kex:
            Perform GSS-API Key Exchange and user authentication
        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
        :param str gss_host:
            The targets name in the kerberos database. default: hostname
        :param bool gss_trust_dns:
            Indicates whether or not the DNS is trusted to securely
            canonicalize the name of the host being connected to (default
            ``True``).
        :param float banner_timeout: an optional timeout (in seconds) to wait
            for the SSH banner to be presented.
        :param float auth_timeout: an optional timeout (in seconds) to wait for
            an authentication response.
        :param dict disabled_algorithms:
            an optional dict passed directly to `.Transport` and its keyword
            argument of the same name.
    
        :raises:
            `.BadHostKeyException` -- if the server's host key could not be
            verified
        :raises: `.AuthenticationException` -- if authentication failed
        :raises:
            `.SSHException` -- if there was any other error connecting or
            establishing an SSH session
        :raises socket.error: if a socket error occurred while connecting
    
        .. versionchanged:: 1.15
            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
            ``gss_deleg_creds`` and ``gss_host`` arguments.
        .. versionchanged:: 2.3
            Added the ``gss_trust_dns`` argument.
        .. versionchanged:: 2.4
            Added the ``passphrase`` argument.
        .. versionchanged:: 2.6
            Added the ``disabled_algorithms`` argument.
        """
        if not sock:
            errors = {}
            # Try multiple possible address families (e.g. IPv4 vs IPv6)
            to_try = list(self._families_and_addresses(hostname, port))
            for af, addr in to_try:
                try:
                    sock = socket.socket(af, socket.SOCK_STREAM)
                    if timeout is not None:
                        try:
                            sock.settimeout(timeout)
                        except:
                            pass
>                   retry_on_signal(lambda: sock.connect(addr))

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

function = <function SSHClient.connect.<locals>.<lambda> at 0x7ff72adf0d90>

    def retry_on_signal(function):
        """Retries function until it doesn't raise an EINTR error"""
        while True:
            try:
>               return function()

/usr/local/lib/python3.6/site-packages/paramiko/util.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   retry_on_signal(lambda: sock.connect(addr))
E   socket.timeout: timed out

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: timeout

During handling of the above exception, another exception occurred:

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff72724a160>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
                                                        self.sut_conf["password"],self.sut_conf["port"])
        except:
            logging.info("Case Failed:ssh to sut failed,please check")
>           assert 200 == 400, "Case Failed:ssh to sut failed,please check"
E           AssertionError: Case Failed:ssh to sut failed,please check
E           assert 200 == 400

npxtester/Tests/testNics/test_nics.py:35: AssertionError
---------------------------- Captured stdout setup -----------------------------
2022-04-13 06:10:07 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_InternetProtocolv4v6_06_10_07/test_PI_Networking_InternetProtocolv4v6.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_InternetProtocolv4v6_06_10_07
2022-04-13 06:10:07 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_PI_Networking_InternetProtocolv4v6 case ============================
2022-04-13 06:10:07 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:10:07 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:10:37 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
_______ ERROR at setup of Test_Nics.test_PI_Networking_Link_State_Check ________

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270e64e0>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
>                                                       self.sut_conf["password"],self.sut_conf["port"])

npxtester/Tests/testNics/test_nics.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <libs.commons.sshInstance.sshInstance object at 0x7ff7270e6438>
hostname = '10.239.183.130', username = 'root', password = 'password', port = 22

    def get_ssh_instance(self, hostname, username, password, port):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
>       client.connect(hostname=hostname, port=port, username=username, password=password, timeout=30)

npxtester/libs/commons/sshInstance.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <paramiko.client.SSHClient object at 0x7ff7270e64a8>
hostname = '10.239.183.130', port = 22, username = 'root', password = 'password'
pkey = None, key_filename = None, timeout = 30, allow_agent = True
look_for_keys = True, compress = False
sock = <socket.socket fd=9, family=AddressFamily.AF_INET, type=2049, proto=0, laddr=('10.112.97.60', 35782)>
gss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None
banner_timeout = None, auth_timeout = None, gss_trust_dns = True
passphrase = None, disabled_algorithms = None

    def connect(
        self,
        hostname,
        port=SSH_PORT,
        username=None,
        password=None,
        pkey=None,
        key_filename=None,
        timeout=None,
        allow_agent=True,
        look_for_keys=True,
        compress=False,
        sock=None,
        gss_auth=False,
        gss_kex=False,
        gss_deleg_creds=True,
        gss_host=None,
        banner_timeout=None,
        auth_timeout=None,
        gss_trust_dns=True,
        passphrase=None,
        disabled_algorithms=None,
    ):
        """
        Connect to an SSH server and authenticate to it.  The server's host key
        is checked against the system host keys (see `load_system_host_keys`)
        and any local host keys (`load_host_keys`).  If the server's hostname
        is not found in either set of host keys, the missing host key policy
        is used (see `set_missing_host_key_policy`).  The default policy is
        to reject the key and raise an `.SSHException`.
    
        Authentication is attempted in the following order of priority:
    
            - The ``pkey`` or ``key_filename`` passed in (if any)
    
              - ``key_filename`` may contain OpenSSH public certificate paths
                as well as regular private-key paths; when files ending in
                ``-cert.pub`` are found, they are assumed to match a private
                key, and both components will be loaded. (The private key
                itself does *not* need to be listed in ``key_filename`` for
                this to occur - *just* the certificate.)
    
            - Any key we can find through an SSH agent
            - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
              ``~/.ssh/``
    
              - When OpenSSH-style public certificates exist that match an
                existing such private key (so e.g. one has ``id_rsa`` and
                ``id_rsa-cert.pub``) the certificate will be loaded alongside
                the private key and used for authentication.
    
            - Plain username/password auth, if a password was given
    
        If a private key requires a password to unlock it, and a password is
        passed in, that password will be used to attempt to unlock the key.
    
        :param str hostname: the server to connect to
        :param int port: the server port to connect to
        :param str username:
            the username to authenticate as (defaults to the current local
            username)
        :param str password:
            Used for password authentication; is also used for private key
            decryption if ``passphrase`` is not given.
        :param str passphrase:
            Used for decrypting private keys.
        :param .PKey pkey: an optional private key to use for authentication
        :param str key_filename:
            the filename, or list of filenames, of optional private key(s)
            and/or certs to try for authentication
        :param float timeout:
            an optional timeout (in seconds) for the TCP connect
        :param bool allow_agent:
            set to False to disable connecting to the SSH agent
        :param bool look_for_keys:
            set to False to disable searching for discoverable private key
            files in ``~/.ssh/``
        :param bool compress: set to True to turn on compression
        :param socket sock:
            an open socket or socket-like object (such as a `.Channel`) to use
            for communication to the target host
        :param bool gss_auth:
            ``True`` if you want to use GSS-API authentication
        :param bool gss_kex:
            Perform GSS-API Key Exchange and user authentication
        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
        :param str gss_host:
            The targets name in the kerberos database. default: hostname
        :param bool gss_trust_dns:
            Indicates whether or not the DNS is trusted to securely
            canonicalize the name of the host being connected to (default
            ``True``).
        :param float banner_timeout: an optional timeout (in seconds) to wait
            for the SSH banner to be presented.
        :param float auth_timeout: an optional timeout (in seconds) to wait for
            an authentication response.
        :param dict disabled_algorithms:
            an optional dict passed directly to `.Transport` and its keyword
            argument of the same name.
    
        :raises:
            `.BadHostKeyException` -- if the server's host key could not be
            verified
        :raises: `.AuthenticationException` -- if authentication failed
        :raises:
            `.SSHException` -- if there was any other error connecting or
            establishing an SSH session
        :raises socket.error: if a socket error occurred while connecting
    
        .. versionchanged:: 1.15
            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
            ``gss_deleg_creds`` and ``gss_host`` arguments.
        .. versionchanged:: 2.3
            Added the ``gss_trust_dns`` argument.
        .. versionchanged:: 2.4
            Added the ``passphrase`` argument.
        .. versionchanged:: 2.6
            Added the ``disabled_algorithms`` argument.
        """
        if not sock:
            errors = {}
            # Try multiple possible address families (e.g. IPv4 vs IPv6)
            to_try = list(self._families_and_addresses(hostname, port))
            for af, addr in to_try:
                try:
                    sock = socket.socket(af, socket.SOCK_STREAM)
                    if timeout is not None:
                        try:
                            sock.settimeout(timeout)
                        except:
                            pass
>                   retry_on_signal(lambda: sock.connect(addr))

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

function = <function SSHClient.connect.<locals>.<lambda> at 0x7ff7272eb7b8>

    def retry_on_signal(function):
        """Retries function until it doesn't raise an EINTR error"""
        while True:
            try:
>               return function()

/usr/local/lib/python3.6/site-packages/paramiko/util.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   retry_on_signal(lambda: sock.connect(addr))
E   socket.timeout: timed out

/usr/local/lib/python3.6/site-packages/paramiko/client.py:349: timeout

During handling of the above exception, another exception occurred:

self = <Tests.testNics.test_nics.Test_Nics object at 0x7ff7270e64e0>

    def setup(self):
        logging.info("this is Test_Nics setup.")
        self.sut_conf = settings.__getattribute__("sut_conf")
        self.pkg_generator = settings.__getattribute__("pkg_generator")
        self.drive_info = settings.__getattribute__("drive_info")
        self.check_str = settings.__getattribute__("check_str")
        self.dpdk_dir = settings.__getattribute__("dpdk_dir")
        self.cn_test_sut = sshInstance()
        logging.info("ssh to the sut1")
    
        try:
            self.client, self.session = self.cn_test_sut.get_ssh_instance(self.sut_conf["host"], self.sut_conf["user"],
                                                        self.sut_conf["password"],self.sut_conf["port"])
        except:
            logging.info("Case Failed:ssh to sut failed,please check")
>           assert 200 == 400, "Case Failed:ssh to sut failed,please check"
E           AssertionError: Case Failed:ssh to sut failed,please check
E           assert 200 == 400

npxtester/Tests/testNics/test_nics.py:35: AssertionError
---------------------------- Captured stdout setup -----------------------------
2022-04-13 06:10:37 - NicTestFixture.py - [line:27] - root - INFO - case_logpath: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_Link_State_Check_06_10_37/test_PI_Networking_Link_State_Check.log, case_logdir: /root/testconfig/testlogs/2022-04-13/test_PI_Networking_Link_State_Check_06_10_37
2022-04-13 06:10:37 - NicTestFixture.py - [line:31] - root - INFO - ============================ Starting to run test_PI_Networking_Link_State_Check case ============================
2022-04-13 06:10:37 - test_nics.py - [line:21] - root - INFO - this is Test_Nics setup.
2022-04-13 06:10:37 - test_nics.py - [line:28] - root - INFO - ssh to the sut1
2022-04-13 06:11:07 - test_nics.py - [line:34] - root - INFO - Case Failed:ssh to sut failed,please check
=============================== warnings summary ===============================
npxtester/Tests/testNics/test_iperf_client_4hour.py:88
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_iperf_client_4hour.py:88: PytestUnknownMarkWarning: Unknown pytest.mark.iperf_tcp - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.iperf_tcp

npxtester/Tests/testNics/test_iperf_client_4hour.py:137
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_iperf_client_4hour.py:137: PytestUnknownMarkWarning: Unknown pytest.mark.iperf_udp - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.iperf_udp

npxtester/Tests/testNics/test_mtu.py:69
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_mtu.py:69: PytestUnknownMarkWarning: Unknown pytest.mark.two_sut_CVL - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.two_sut_CVL

npxtester/Tests/testNics/test_mtu.py:70
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_mtu.py:70: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_mtu.py:109
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_mtu.py:109: PytestUnknownMarkWarning: Unknown pytest.mark.two_sut_CVL - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.two_sut_CVL

npxtester/Tests/testNics/test_mtu.py:110
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_mtu.py:110: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_network_sriov_stress.py:565
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_network_sriov_stress.py:565: PytestUnknownMarkWarning: Unknown pytest.mark.nicSriov5times - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSriov5times

npxtester/Tests/testNics/test_network_sriov_stress.py:691
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_network_sriov_stress.py:691: PytestUnknownMarkWarning: Unknown pytest.mark.nicSriov2hours - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSriov2hours

npxtester/Tests/testNics/test_network_sriov_stress.py:931
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_network_sriov_stress.py:931: PytestUnknownMarkWarning: Unknown pytest.mark.SriovVfIperf - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.SriovVfIperf

npxtester/Tests/testNics/test_network_sriov_stress.py:1067
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_network_sriov_stress.py:1067: PytestUnknownMarkWarning: Unknown pytest.mark.nicIperfTcpSUTGuestStress - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicIperfTcpSUTGuestStress

npxtester/Tests/testNics/test_network_sriov_stress.py:1068
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_network_sriov_stress.py:1068: PytestUnknownMarkWarning: Unknown pytest.mark.SriovVfIperf - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.SriovVfIperf

npxtester/Tests/testNics/test_nics.py:102
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:102: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_nics.py:128
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:128: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_nics.py:158
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:158: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_nics.py:159
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:159: PytestUnknownMarkWarning: Unknown pytest.mark.test - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.test

npxtester/Tests/testNics/test_nics.py:244
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:244: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_nics.py:270
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:270: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

npxtester/Tests/testNics/test_nics.py:313
  /root/.jenkins/workspace/spr-test-nicSilver/npxtester/Tests/testNics/test_nics.py:313: PytestUnknownMarkWarning: Unknown pytest.mark.nicSimple - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html
    @pytest.mark.nicSimple

-- Docs: https://docs.pytest.org/en/stable/warnings.html
- generated html file: file:///root/testconfig/testlogs/HtmlReport/nicSilver_report.html -
=========================== short test summary info ============================
ERROR npxtester/Tests/testNics/test_nics.py::Test_Nics::test_silver_Networking_ConnectivityEnableDisable
ERROR npxtester/Tests/testNics/test_nics.py::Test_Nics::test_silver_ConnectivityReboot
ERROR npxtester/Tests/testNics/test_nics.py::Test_Nics::test_gold_PI_Networking_SRIOV_CheckDevice
ERROR npxtester/Tests/testNics/test_nics.py::Test_Nics::test_PI_Networking_InternetProtocolv4v6
ERROR npxtester/Tests/testNics/test_nics.py::Test_Nics::test_PI_Networking_Link_State_Check
========== 14 deselected, 18 warnings, 5 errors in 150.54s (0:02:30) ===========
[8mha:////4KA/r62Qr4gsY9dk2vCoof96zpu/EoMSnZt+SfgJygtrAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIi0SCEqNJabniBiY1xYt0Z2yGpeBFf4w8EIlGxxWpnm3m+YJkiHDlabA11jlLjMPjeTgsHjt3F84Atn7FhSuwNSjNI1qaeUXI2MKcoYSFgZajxnBzZDGvRqruqvCJbnXKcvoOA0ukbPKAQkzmrmL8wRthce52Yfp6/AhhDhnK7+9Q+vAHuV4Y5vgAAAA==[0m[Pipeline] echo
1
[8mha:////4BToplDDr8pWB7ISBQuATLYvqvFP8xQdk2uE0e0so4JkAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOKCoKBAqWgtN7zAJMY4se6C7eBUvIiv8QcsIlGxxWpnm3m9YRk81OwNdpp6S6GxOLjR5IWJfX91nLDjCzZMgZ1GqZPkVp9mlBw1zClKWAhYaWocB0smwlp06qEqp8hU5+jzdxRQ2vYOTyhENkfl4xcmD5vb2Aamn+evAKYhQrk75Npvhw+QhobpvgAAAA==[0m[Pipeline] sh
+ sed -i $'s/\r//g' /root/.jenkins/workspace/spr-test-nicSilver/npxtester/log_analyzer/log_analyzer.sh
[8mha:////4NdyR6esyVXyTBgVxGN3pvKqVJJ13Ywx7ttDT15hsTv3AAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIioKBAqWgtN7zAJMY4se6C7eBUvIiv8QcsIlGxxWpnm3m9YRk81OwNdpp6S6GxOLjR5IWJfX91nLDjCzZMgZ1GqZPkVp9mlBw1zClKWAhYaWocB0smwlp06qEqp8hU5+jzdxRQ2vYOTyhENkfl4xcmD5vb2Aamn+evAKYhQrk75Npvhw/Rt53wvgAAAA==[0m[Pipeline] sh
+ chmod a+x /root/.jenkins/workspace/spr-test-nicSilver/npxtester/log_analyzer/log_analyzer.sh
[8mha:////4K7YywzfQIueKJKcysWJFDQ2p//j7G1RZyvTBryBuAiBAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIihYICUaW10vACExvjxLoztkNS8SK+xh+wiETFFqudbeb1hnUMcOJgsNc0WIqdRe9GkxdOHIar4wl7vmDHFNlpbPXUstLNgi0nDUuKElYCNpo6x9GSSbAVvXzIykky1TmF/B0FlFbd4QmFyOYkQ/rCHGB3G1Vk+nn+CmD2Ccr6kGtf+w8S5LDbvgAAAA==[0m[Pipeline] sh
+ sh /root/.jenkins/workspace/spr-test-nicSilver/npxtester/log_analyzer/log_analyzer.sh
[8mha:////4H+CJFvF/YRdgS3sjnr3E1nAcVsDg+kfYq6wrxIIMR8BAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPMKRSEGBqNJaaXiBiQ/jxLoztkNS8SK+xh+wiETFFqudbeb1hnUMcOJgRI80WIqdFd6NJi8xcRiujifR80V0TJEdihanljU2C7acEJYUJawkbJA6x9GSSbCVvXqoyiky1TmF/B0llFbf4QmFzOakQvrCHGB3G3Vk+nn+CmD2PkFZ17n2hw9eAqiyvgAAAA==[0m[Pipeline] }
[8mha:////4L2a0AkRrbBVVz6IwQxbxppoWdNTG0kq02Zftl/SiuAhAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIiAaJBqWgtN7zAJMY4se6C7eBUvIiv8QcsIlGxxWpnm3m9YRk81OwNdpp6S6GxOLjR5IWJfX91nLDjCzZMgZ1GqZPkVp9mlBw1zClKWAhYaWocB0smwlp06qEqp8hU5+jzdxRQ2vYOTyhENkfl4xcmD5vb2Aamn+evAKZhiFDu9rm2hw9wAqrYvgAAAA==[0m[Pipeline] // script
[8mha:////4KDTtsktr+q1EbIECRmR/wVaBGQMe/HAXVuRFqTWIP1WAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIigVIhqrRWGl5gYmOcWHfGdkgqXsTX+AMWkajYYrWzzbzesI4BThwM9poGS7Gz6N1o8sKJw3B1PGHPF+yYIjuNrZ5aVrpZsOWkYUlRwkrARlPnOFoyCbailw9ZOUmmOqeQv6OA0qo7PKEQ2ZxkSF+YA+xuo4pMP89fAczeJygPda59/QFvgP+KvgAAAA==[0m[Pipeline] }
[8mha:////4CxYh73EpqQkS036Jlu+hjMM9UfkXS+kakc1g/8IuaawAAAApR+LCAAAAAAAAP9tjTEOwjAQBC9BFLSUPOIiAaJBqWgtN7zAJMY4se6C7eBUvIiv8QcsIlGxxWpnm3m9YRk81OwNdpp6S6GxOLjR5IWJfX91nLDjCzZMgZ1GqZPkVp9mlBw1zClKWAhYaWocB0smwlp06qEqp8hU5+jzdxRQ2vYOTyhENkfl4xcmD5vb2Aamn+evAKZhiFDuDrm2+w9Xwmx7vgAAAA==[0m[Pipeline] // stage
[8mha:////4Aab04+kmC6Hr6dhdcKcm0lA3vZP339bPvxKEb/5ni0jAAAApB+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMIpQKJAVLRWGl5gEmOcWHfBvpBUvIiv8QciIlGx1c4083pjmSKOHJ1qLLWeUuVVF3o3PTVwbK+BB9XwRVVMiYNVpR1Kru1pxpLFYl6WY6GxslQFTp6cYK0b8zBFMOSKs8TJHTRyX9/xRKanspgoXxgjNre+Tky/zt8Axq4T5Nu9INt9AJ5WrS29AAAA[0m[Pipeline] }
[8mha:////4IxHk0HN1DUo1kdsk3mV0WUwtpSwLZQYmcm2i9/6i8/mAAAAox+LCAAAAAAAAP9tjbEOgjAURS8YB1dHP6IMLCbGybVh8Qsq1Fpo3sP2IUx+kb/mP0gkcfJO95zlvN5Yp4gjR6daS52nVHvVh8HNT40cu2vgUbV8UTVT4mBVZceKG3tasGKxWJblWGlsLNWBkycn2OrWPEwRDLniLHF2B43cN3c8kem5LCbKF6aI3W1oEtOv8zeAqe8FebkXZOUH7FSZMb0AAAA=[0m[Pipeline] // node
[8mha:////4Omq6qEMQ+DnTQcS1tZnE3lH37TQsDza1XDPVCwghFAjAAAAox+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMKRoEKIitZKwwtMYowT6y7YF5KKF/E1/kBEJCq22plmXm8sU8SRo1ONpdZTqrzqQu+mpwaO7TXwoBq+qIopcbCqtEPJtT3NWLJYzMtyLDRWlqrAyZMTrHVjHqYIhlxxlji5g0bu6zueyPRUFhPlC2PE5tbXienX+RvA2HWCfLcXZNsPyk3+e70AAAA=[0m[Pipeline] End of Pipeline
Finished: FAILURE
